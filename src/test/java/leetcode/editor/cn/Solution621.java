package leetcode.editor.cn;
//Áªô‰Ω†‰∏Ä‰∏™Áî®Â≠óÁ¨¶Êï∞ÁªÑ tasks Ë°®Á§∫ÁöÑ CPU ÈúÄË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÂàóË°®„ÄÇÂÖ∂‰∏≠ÊØè‰∏™Â≠óÊØçË°®Á§∫‰∏ÄÁßç‰∏çÂêåÁßçÁ±ªÁöÑ‰ªªÂä°„ÄÇ‰ªªÂä°ÂèØ‰ª•‰ª•‰ªªÊÑèÈ°∫Â∫èÊâßË°åÔºåÂπ∂‰∏îÊØè‰∏™‰ªªÂä°ÈÉΩÂèØ‰ª•Âú® 1 ‰∏™
//Âçï‰ΩçÊó∂Èó¥ÂÜÖÊâßË°åÂÆå„ÄÇÂú®‰ªª‰Ωï‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåCPU ÂèØ‰ª•ÂÆåÊàê‰∏Ä‰∏™‰ªªÂä°ÔºåÊàñËÄÖÂ§Ñ‰∫éÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ 
//
// ÁÑ∂ËÄåÔºå‰∏§‰∏™ Áõ∏ÂêåÁßçÁ±ª ÁöÑ‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÊúâÈïøÂ∫¶‰∏∫Êï¥Êï∞ n ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåÂõ†Ê≠§Ëá≥Â∞ëÊúâËøûÁª≠ n ‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖ CPU Âú®ÊâßË°å‰∏çÂêåÁöÑ‰ªªÂä°ÔºåÊàñËÄÖÂú®ÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ 
//
// ‰Ω†ÈúÄË¶ÅËÆ°ÁÆóÂÆåÊàêÊâÄÊúâ‰ªªÂä°ÊâÄÈúÄË¶ÅÁöÑ ÊúÄÁü≠Êó∂Èó¥ „ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 2
//ËæìÂá∫Ôºö8
//Ëß£ÈáäÔºöA -> B -> (ÂæÖÂëΩ) -> A -> B -> (ÂæÖÂëΩ) -> A -> B
//     Âú®Êú¨Á§∫‰æã‰∏≠Ôºå‰∏§‰∏™Áõ∏ÂêåÁ±ªÂûã‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÈó¥ÈöîÈïøÂ∫¶‰∏∫ n = 2 ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåËÄåÊâßË°å‰∏Ä‰∏™‰ªªÂä°Âè™ÈúÄË¶Å‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåÊâÄ‰ª•‰∏≠Èó¥Âá∫Áé∞‰∫ÜÔºàÂæÖÂëΩÔºâÁä∂ÊÄÅ„ÄÇ 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 0
//ËæìÂá∫Ôºö6
//Ëß£ÈáäÔºöÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºå‰ªª‰ΩïÂ§ßÂ∞è‰∏∫ 6 ÁöÑÊéíÂàóÈÉΩÂèØ‰ª•Êª°Ë∂≥Ë¶ÅÊ±ÇÔºåÂõ†‰∏∫ n = 0
//["A","A","A","B","B","B"]
//["A","B","A","B","A","B"]
//["B","B","B","A","A","A"]
//...
//ËØ∏Â¶ÇÊ≠§Á±ª
// 
//
// Á§∫‰æã 3Ôºö 
//
// 
//ËæìÂÖ•Ôºötasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
//ËæìÂá∫Ôºö16
//Ëß£ÈáäÔºö‰∏ÄÁßçÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÔºö
//     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (ÂæÖÂëΩ) -> (ÂæÖÂëΩ) -> A -> (ÂæÖ
//ÂëΩ) -> (ÂæÖÂëΩ) -> A
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= task.length <= 104 
// tasks[i] ÊòØÂ§ßÂÜôËã±ÊñáÂ≠óÊØç 
// n ÁöÑÂèñÂÄºËåÉÂõ¥‰∏∫ [0, 100] 
// 
// Related Topics Ë¥™ÂøÉÁÆóÊ≥ï ÈòüÂàó Êï∞ÁªÑ 
// üëç 609 üëé 0


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution621 {

    public int leastInterval(char[] tasks, int n) {
        int ans = 0;
        Map<Character, Integer> count = new HashMap<>();
        Map<Character, Integer> nextClock = new HashMap<>();
        for (char t : tasks) {
            count.put(t, count.getOrDefault(t, 0) + 1);
            nextClock.put(t, 0);
        }
        List<Character> seq = new ArrayList<>(count.keySet());
        while (true) {
            if (seq.size() == 0) {
                break;
            }
            ans += 1;
            seq.sort((o1, o2) -> count.get(o2) - count.get(o1));
            Character task = ' ';
            for (int i = 0; i < seq.size(); i++) {
                Character c = seq.get(i);
                if (count.get(c) > 0 && (nextClock.get(c) == ans || nextClock.get(c) == 0)) {
                    count.put(c, count.get(c) - 1);
                    nextClock.put(c, ans + n + 1);
                    task = c;
                    break;
                }
            }
            if (count.get(task) == 0) {
                seq.remove(task);
            }

        }
        return ans;
    }

    public static void main(String[] args) {
        Solution621 s = new Solution621();
        char[] arr = new char[]{'a', 'a', 'b','b','c','c'};
        s.leastInterval(arr, 1);
    }
}
//leetcode submit region end(Prohibit modification and deletion)
